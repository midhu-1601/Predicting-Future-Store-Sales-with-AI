# -*- coding: utf-8 -*-
"""6Untitled.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x_1AWFo5HJibmjgtTg_3Vo0uNGVvT-GT
"""

!pip install statsmodels

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error


sns.set_style('whitegrid')
plt.rcParams['figure.figsize'] = (12, 6)

!git clone "https://github.com/GeeksforgeeksDS/21-Days-21-Projects-Dataset"

df = pd.read_csv('/content/21-Days-21-Projects-Dataset/Datasets/airline_passenger_timeseries.csv')
df.head(5)

df.describe()

df.plot()
plt.title('Monthly Airline Passengers (1949-1960)')
plt.xlabel('Year')
plt.ylabel('Number of Passengers')
plt.show()

df['Month']=pd.to_datetime(df['Month'])
df.set_index('Month',inplace=True)
decomposition=sm.tsa.seasonal_decompose(df['Passengers'],model='multiplicative')
fig=decomposition.plot()
fig.set_size_inches(15,8)
plt.show()

def test_stationarity(timeseries):
    print('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
        dfoutput['Critical Value (%s)'%key] = value
    print(dfoutput)

test_stationarity(df['Passengers'])

df_log=np.log(df['Passengers'])
df_diff=df_log.diff().dropna()
df_diff.plot()
plt.title('Monthly Airline Passengers (1949-1960)')
plt.xlabel('Year')
plt.ylabel('Number of Passengers')
plt.show()
test_stationarity(df_diff)

fig,(ax1,ax2)=plt.subplots(2,1,figsize=(12,10))
plot_acf(df_diff,ax=ax1,lags=20)
plot_pacf(df_diff,ax=ax2,lags=20)
plt.show()

train_data = df_log[:'1958']
test_data = df_log['1959':]

model = ARIMA(train_data, order=(1, 1, 1), freq='MS')
arima_result = model.fit()

forecast = arima_result.get_forecast(steps=len(test_data))
forecast_ci = forecast.conf_int()

plt.figure(figsize=(14, 7))
plt.plot(df_log, label='Original Log Data')
plt.plot(forecast.predicted_mean, label='Forecast')
plt.fill_between(forecast_ci.index, forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1], color='k', alpha=.15)
plt.title('ARIMA Model Forecast')
plt.legend()
plt.show()

sarima_model=sm.tsa.statespace.SARIMAX(train_data,order=(1,1,1),seasonal_order=(1,1,1,12),
                                       enforce_stationarity=False,enforce_invertibility=False,
                                       freq='MS')
sarima_result=sarima_model.fit()

sarima_forecast=sarima_result.get_forecast(steps=len(test_data))
sarima_forecast_ci=sarima_forecast.conf_int()
plt.figure(figsize=(14,7))
plt.plot(df_log,label='Original Log Data')
plt.plot(sarima_forecast.predicted_mean,label='Forecast',color='red')
plt.fill_between(sarima_forecast_ci.index,sarima_forecast_ci.iloc[:,0],sarima_forecast_ci.iloc[:,1],color='r',alpha=.15)
plt.title('SARIMA Model Forecast')
plt.legend()
plt.show()

original_test_data=np.exp(test_data)
sarima_predictions=np.exp(sarima_forecast.predicted_mean)
rmse=np.sqrt(mean_squared_error(original_test_data,sarima_predictions))
print(f"SARIMA Model RMSE:{rmse:.2f}")
plt.figure(figsize=(14,7))
plt.plot(df['Passengers'],label='Original Data')
plt.plot(sarima_predictions,label='SARIMA Predictions',color='red')
plt.title('Final Forecast vs. Actual Data')
plt.legend()
plt.show()